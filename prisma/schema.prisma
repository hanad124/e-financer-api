generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  email         String  @unique
  name          String?
  password      String
  isVarified    Boolean @default(false)
  avatar        String? @default("https://t3.ftcdn.net/jpg/06/33/54/78/360_F_633547842_AugYzexTpMJ9z1YcpTKUBoqBF0CUCk10.jpg")
  description   String?
  expoPushToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  otps         OTP[]
  transactions Transactions[]
  categories   Category[]
  budgets      Budget[]
  goals        Goal[]
}

// token model
model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String   @unique
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  // relation
  user User @relation(fields: [userId], references: [id])
}

// transaction model
model Transactions {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?         @default("")
  amount      Float
  number      Int?
  type        TransactionType
  receipt     String?

  categoryId String   @db.ObjectId
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relation
  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  budgetId        String?           @db.ObjectId
  GoalTransaction GoalTransaction[]
  Budget          Budget?           @relation(fields: [budgetId], references: [id])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  iconId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  transactions Transactions[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  icons        Icon?          @relation(fields: [iconId], references: [id])
}

model Icon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  icon      String   @default("https://cdn-icons-png.flaticon.com/512/2920/2920320.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  categories Category[]
  Budget     Budget[]
}

model Goal {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  amount       Float
  targetDate   DateTime
  icon         String?   @default("https://img.icons8.com/?size=100&id=20884&format=png&color=6957E7")
  achieved     Boolean   @default(false)
  achievedDate DateTime?
  emailSent    Boolean   @default(false)
  userId       String    @db.ObjectId
  savedAmount  Float     @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalTransactions GoalTransaction[]

  @@unique([name, userId]) // A user can't have duplicate goal names
}

model GoalTransaction {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  goalId        String @db.ObjectId
  transactionId String @db.ObjectId

  // relations
  goal        Goal         @relation(fields: [goalId], references: [id])
  transaction Transactions @relation(fields: [transactionId], references: [id])
}

model Budget {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  amount      Float
  description String
  icon        String? @default("https://img.icons8.com/?size=100&id=484&format=png&color=6957E7")
  userId      String  @db.ObjectId
  leftToSpend Float   @default(0.0)
  isCompleted Boolean @default(false)
  isEditted   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transactions[]
  Icon         Icon?          @relation(fields: [iconId], references: [id])
  iconId       String?        @db.ObjectId

  @@unique([name, userId]) 
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum GoalType {
  INCOME
  EXPENSE
  SAVINGS
}
